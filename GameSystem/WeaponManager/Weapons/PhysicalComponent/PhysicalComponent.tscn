[gd_scene load_steps=7 format=3 uid="uid://djj783bpwtmvx"]

[ext_resource type="Script" uid="uid://qfkuwgxbwp0y" path="res://GameSystem/WeaponManager/Weapons/PhysicalComponent/physical_component.gd" id="1_t4wu3"]
[ext_resource type="Texture2D" uid="uid://dr1u2eedgoabu" path="res://Asset/Weapons/sword.png" id="2_7fcwc"]

[sub_resource type="Shader" id="Shader_7fcwc"]
code = "shader_type canvas_item;

uniform bool allow_out_of_bounds = true;
uniform float outline_thickness: hint_range(0.0, 16.0, 1.0) = 1.0;
uniform float scan_dist: hint_range(0.0, 0.01, 0.001) = 1.0;
uniform sampler2D dist_map;
uniform vec4 outline_color: source_color = vec4(1.0);

bool is_inside_usquare(vec2 x) {
	return x == clamp(x, vec2(0.0), vec2(1.0));
}

vec4 blend(vec4 bottom, vec4 top) {
    float alpha = top.a + bottom.a * (1.0 - top.a);
    if (alpha < 0.0001) return vec4(0.0);

    vec3 color = mix(bottom.rgb * bottom.a, top.rgb, top.a) / alpha;
    return vec4(color, alpha);
}

void vertex() {
	if (allow_out_of_bounds) VERTEX += (UV * 2.0 - 1.0) * outline_thickness;
}

void fragment() {
	if (outline_thickness > 0.0 && outline_color.a > 0.0) {
		vec2 uv = UV;
		vec4 texture_color = texture(TEXTURE, UV);

		if (allow_out_of_bounds) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(outline_thickness * 2.0));
			uv = (uv - texture_pixel_size * outline_thickness) * TEXTURE_PIXEL_SIZE / texture_pixel_size;

			if (is_inside_usquare(uv)) {
				texture_color = texture(TEXTURE, uv);
			} else {
				texture_color = vec4(0.0);
			}
		}
		float border_dist = 999.0;
		float alpha = 0.0;

		for (float y = 1.0; y <= outline_thickness; y++) {
			for (float x = 0.0; x <= y; x++) {
				if (length(vec2(x, y - 0.5)) > outline_thickness) break;

				float look_at_alpha;
				vec2 look_at_uv[8] = {
					uv + vec2(x, y) * scan_dist,
					uv + vec2(-x, y) * scan_dist,
					uv + vec2(x, -y) * scan_dist,
					uv + vec2(-x, -y) * scan_dist,
					uv + vec2(y, x) * scan_dist,
					uv + vec2(-y, x) * scan_dist,
					uv + vec2(y, -x) * scan_dist,
					uv + vec2(-y, -x) * scan_dist
				};

				for (int i = 0; i < 8; i++) {
					if (is_inside_usquare(look_at_uv[i])) {
						look_at_alpha = texture(TEXTURE, look_at_uv[i]).a;
						if (look_at_alpha > alpha) alpha = look_at_alpha;

						if (1.0 - alpha < 0.0001) {
							border_dist = distance(uv, look_at_uv[i])/scan_dist;
							break;
						}
					}
				}

				if (1.0 - alpha < 0.0001) break;
			}

			if (1.0 - alpha < 0.0001) break;
		}

		//COLOR = blend(vec4(outline_color.rgb, alpha * outline_color.a), texture_color);

		if (border_dist != 999.0){
			float dist = 1.0 - border_dist/outline_thickness;
			dist = texture(dist_map, vec2(dist, 0.0)).r;
			COLOR = vec4(dist);
		}else{
			COLOR = vec4(0.0);
		}
		//COLOR = vec4(alpha * outline_color.a);



	}
}
"

[sub_resource type="Curve" id="Curve_7fcwc"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(1, 0.495961), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_pnegs"]
curve = SubResource("Curve_7fcwc")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7fcwc"]
shader = SubResource("Shader_7fcwc")
shader_parameter/allow_out_of_bounds = true
shader_parameter/outline_thickness = 16.0
shader_parameter/scan_dist = 0.01
shader_parameter/dist_map = SubResource("CurveTexture_pnegs")
shader_parameter/outline_color = Color(1, 1, 1, 1)

[node name="PhysicalComponent" type="RigidBody2D" groups=["PhysicalComponent"]]
visibility_layer = 7
collision_layer = 264
collision_mask = 264
input_pickable = true
script = ExtResource("1_t4wu3")

[node name="RigidCollision" type="CollisionPolygon2D" parent="."]
unique_name_in_owner = true
visible = false

[node name="MetaBallOutline" type="Sprite2D" parent="."]
unique_name_in_owner = true
visible = false
material = SubResource("ShaderMaterial_7fcwc")
texture = ExtResource("2_7fcwc")

[node name="Sprite2D" type="Sprite2D" parent="."]
unique_name_in_owner = true

[node name="GlueArea" type="Area2D" parent="." groups=["Glue"]]
unique_name_in_owner = true
modulate = Color(0.487977, 0.582093, 1, 1)
collision_layer = 12
collision_mask = 12

[node name="GlueCollision" type="CollisionPolygon2D" parent="GlueArea"]
unique_name_in_owner = true
polygon = PackedVector2Array(-6, -6, 7, -6, 7, 5, -6, 5)

[node name="AttackArea" type="Area2D" parent="."]
unique_name_in_owner = true
modulate = Color(0.831215, 0, 0.155651, 1)
collision_layer = 2
collision_mask = 2

[node name="AttackCollision" type="CollisionPolygon2D" parent="AttackArea"]
unique_name_in_owner = true
polygon = PackedVector2Array(-3, -4, 4, -4, 4, 3, -3, 3)
